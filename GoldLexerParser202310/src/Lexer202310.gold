using gold.**

var currentString: String
var images: GArrayList()
var allSymbols: ISet
var keyWords: ISet
var skipChars: ISet
var StartOps:ISet
var alphaLower :ISet
var digits :ISet
var alphaNum : ISet
var Out : ISet
var diffIdents : Boolean
var Ids: ISet
var translation : GHashTableMap()
var Symbols1: ISet
var  preKW : ISet
var  preOps :ISet
var CharsSymbols1: ISet
var alphaUpper:ISet



chars(string) :=  {string.charAt(i)| 0 <= i <string.length() }

arreglos(string) := {string.substring(0,i)| 1 <= i <= string.length() }

charsStrings(strings) := (∪ s | s ∈ strings: chars(s) )

arregloscompletos(strings):= (∪ s | s ∈ strings: arreglos(s) )

elements(array) :=  {array[i]| 0 <= i < |array| }   

splits(string):= { ⟨string.substring(0,i),string.substring(i,string.length())⟩| 1 <= i <= string.length()-1 }

translation1(q) :=  ((|q|=1 and q ∈Symbols1 and q != '\n')?q:translation.get(q))







function runLexer(M, input) begin 
	
    currentString :=  λ
    images := GArrayList()
    result:=M.acceptsString(input) 
    return ⟨result,images⟩
    
 end
 
 
 
 
 function problems(q: String) begin
    
    if q in allSymbols then return false
    elseif |q|≤1
    	then return true
    else
    	for each ⟨s,t⟩ in splits(q) do
         if not problems(s) and not problems(t) then return false end
       end
       return true
	end
   	
 end
 
 
 function translationPreOps(state) begin
 	 var x, y
 	 var q: String
 	 q:= state
 	 n := q.length()
 	 if n=0 then return λ
 	 elseif q  ∈ allSymbols 
 	 	then images.add(q)
 	 	return translation1(q)  
 	 elseif n=1 
 	 	then
 	 		return λ
 	 else  
 	 	 for each ⟨s,t⟩ in splits(q) do
 	     	x:=translationPreOps(s)
       	y:=translationPreOps(t) 
          	if x≠ λ  and  y≠λthen 
            return x+y end
        end
        
 	    return   λ
 	     
   end

 end
 
 
 
 
function createLexer():ITransducer begin
	
	initialize()
	
	
	Out   :=CharsSymbols1 ∪ (∪ x | x ∈ translation.values(): {x} )
 	preKW  := arregloscompletos(keyWords)
   StartOps := (∪ x | x ∈ allSymbols: {x.charAt(0)} ) 
   CharsSymbols1 := (∪ x | x ∈ Symbols1: {x.charAt(0)} )
   preOps := arregloscompletos(allSymbols)
	Symbols1 := ((∪ x | x ∈ StartOps: {""+x} ) ∩ allSymbols)

	

	print Out
   Ids:= {"IdU","IdL"}

   Q:= {"INIT","IdU","Num","Err","IdL"} ∪ preKW ∪ preOps 
	
	print Q
	
	Σ:= alphaNum ∪ charsStrings(allSymbols) ∪ skipChars ∪ {':','-', '_'}
	
	 
	q₀:="INIT"
	F:= {"INIT"}
	return 	GDeterministicTransducer(Q,Σ,Out,q₀,F,δ,g,h)
end




function δ(state,σ) begin
  
 
   var q: String
   q := state
   
   if q = "Err" then return "Err" 
   elseif q ∈ preOps 
   	then
 		if q+σ in preOps then return q+σ 
     	elseif problems(q)
     		then  return "Err"
    	elseif σ ∈ skipChars
    		then return "INIT"	
     	elseif  σ in ('0'‥'9')
     		then  return "Num"
       elseif  λ+σ in preKW
       	then return λ+σ
       elseif  σ in alphaUpper
       	then return "IdU"	
       elseif  σ in alphaLower
       	then return "IdL"	
       elseif  λ+σ in preOps
       	then	 return λ+σ
       else return "Err"
  		end	  	
    elseif  σ ∈ skipChars and q ∈ preKW and not (q∈keyWords) and q.charAt(0)=':'   
    	then return "Err"	
    elseif q = "Num" and  σ in ('0'‥'9') 
    	then  return "Num"
    elseif q = "Num" and  λ+σ in preOps  
    	then return λ+σ
    elseif q = "Num" and σ in alphaNum 
    	then return "Err"	
    elseif  σ ∈ skipChars   
    	then return "INIT"	
    elseif q="INIT" and  λ+σ in preKW 
    	then return λ+σ
    elseif q = "INIT" and σ in alphaUpper  
    	then return "IdU"
    elseif q = "INIT" and σ in alphaLower  
    	then return "IdL"	
    elseif q="INIT" and  σ in ('0'‥'9')
    	then  return "Num"
    elseif q = "INIT" and  λ+σ in preOps 
    	then	 return λ+σ
    elseif q ∈ preKW  and  λ+σ in preOps 
    	then	 return λ+σ
    elseif q ∈ Ids  and σ in alphaNum 
    	then return q
    elseif q ∈ Ids and  λ+σ in preOps  
    	then return λ+σ
    elseif q ∈ preKW  and (q+σ) in preKW 
    	then return q+σ 	
    elseif q ∈ preKW and σ in alphaNum  and q.charAt(0) ∈ alphaUpper 
    	then return "IdU"
    elseif q ∈ preKW and σ in alphaNum  and q.charAt(0) ∈ alphaLower 
    	then return "IdL"
    else return "Err"
end	
end 

 


function g(q) begin
	return λ
end

function h(q,σ) begin
	var s: String
	s :=(σ = '\n')?"\\n": (λ+σ)  
    
  	if q ∈ preOps  then
       if σ ∈ skipChars and q ∈ allSymbols then 
       	images.add(currentString)
       	currentString := λ
       	return translation1(q)
       	
       elseif q+σ in preOps then 
       	currentString := currentString + s
       	return λ
       	
       elseif σ ∈ (StartOps ∪ alphaNum) and q ∈ allSymbols then 
       	images.add(currentString)
       	currentString := λ  + s
       	return translation1(q)
       	
      elseif σ ∈ (StartOps ∪ alphaNum ∪ skipChars∪{':'})  then 
      	   currentString := λ  + s
      	   return translationPreOps(q)
      	   
       else	
       	currentString := currentString + s
       	return λ
       	
       end
     
     
   elseif q ∉ {"Err"} and σ ∈ skipChars  ∪ StartOps then
		if q="INIT" then 
		   currentString := (σ ∈ StartOps)? s:λ
			return λ
    	elseif translation1(q)=null then 
		  
         images.add(currentString)
         currentString := (σ ∈ skipChars  ∪ StartOps)?s:λ
         f= q.charAt(0)
       	 
       	 if f in alphaUpper then return translation1("IdU")
       	 elseif f in alphaLower then 
       	 return translation1("IdL")
       	 
       	 else  return null
       	end
    	else 
    		images.add(currentString)
       		currentString := (σ ∈ skipChars  ∪ StartOps)?s:λ
    		return translation1(q)
    	end
    else 
    		 currentString := currentString + s
    	return  λ

end
end

 
 procedure initialize() begin
 
  	 skipChars := {' ', '\t', '\n'}
	 alphaUpper := ('A'‥'Z')
   	 alphaLower := ('a' ‥ 'z') 
   	 digits :=  ('0'‥'9')
	 lphaNum := alphaUpper ∪ alphaLower ∪ digits  ∪ {'-'}      
	
	keyWords := { "face", "jumpInDir", "nop", "right",
	"left", "around","ROBOT_R","VARS", "PROCS","assignTo",
	"goto", "move","balloons", "chips","while", "if", "turn",
	"moveInDir", "jumpToThe", "south", "east", "west", "front",
	"back",  "then","else" ,"do", "north", "put", "pick", "moveToThe",
	"repeat","facing", "canPut", "canPick", "canMoveInDir",
	"canJumpInDir", "canMoveToThe", "canJumpToThe", "not"}
	
	allSymbols := {"[", "]",":", ";", "|", "," }  
	
	
	translation.put("canJumpToThe", 'M') 
	translation.put("not", '0')
	translation.put("canJumpInDir", 'I') 
	translation.put("canPut", 'p')
	translation.put("canPick", 'p') 
	translation.put("while", 'w') 
	translation.put("put", 'p')
	translation.put("canMoveToThe", 'M')
	translation.put("left", 'd')
	translation.put("IdU",'v') 
	translation.put("Num",'#')
	translation.put("face", 'f')
	translation.put("else", 'e') 
	translation.put("turn", 't')
	translation.put("front", 'd')
	translation.put("back", 'd')
	translation.put("balloons", 'B')
	translation.put("around", 'd')
	translation.put("jumpToThe", 'M')
	translation.put("moveToThe", 'M')
	translation.put("east", 'c')
	translation.put("IdL",'v')  
	translation.put("pick", 'p') 
	translation.put("goto", 'g')
	translation.put("ROBOT_R", 'R')
	translation.put("assignTo", 'a')
	translation.put("move", 'm')
	translation.put("canMoveInDir", 'I') 
	translation.put("nop", 'n')
	translation.put("facing", 'f')
	translation.put("chips", 'B')
	translation.put("do", 'D') 
	translation.put("then", 'T') 
	translation.put("PROCS", 'P')
	translation.put("VARS", 'V')
	translation.put("right", 'd')
	translation.put("south", 'c')
	translation.put("west", 'c')
	translation.put("if", 'i') 
	translation.put("moveInDir", 'I')
	translation.put("jumpInDir", 'I') 
	translation.put("repeat", 'r') 
	translation.put("north", 'c')
	 
end


