import java.util.List
import java.util.ArrayList
using gold.**

procedure main(args:String[]) begin
	GAutomataFrame.show(create())
	Utilities.test(create())
end

function getName() begin
	return "Language of strings of the form W1$W2, where |W1|_a = |W2|_a (mod 3), |W1|_b = |W2|_b (mod 3), and |W1|_c = |W2|_c (mod 3)"
end

function create():IAutomaton begin
	Q := {(i,j,k,l,m,n),$ | i in {0,1,2}, j in {0,1,2}, k in {0,1,2}, l in {0,1,2}, m in {0,1,2}, n in {0,1,2}} ∪ {(0,$)} 
	Σ := {'a','b','c','$'}
	q₀ := (0,$⟩	
	F := {(i,j,k,l,m,n),$ | i = k ∧ j = l ∧ m = n}
	M := GDeterministicAutomaton(Q, Σ, q₀, F, delta)
	return M
end

function delta(q, s) begin
	if q = (0,$) then return (0,$⟩
    i, j, k, l, m, n := q
    
    if s = '$' then return (i,j,k,l,m,n,s)  
    if s = 'a' then return ((i+1)%3,j,k,(l+1)%3,m,n,s)  
    if s = 'b' then return (i,(j+1)%3,k,l,(m+1)%3,n,s)  
    if s = 'c' then return (i,j,(k+1)%3,l,m,(n+1)%3,s)  
    return (0,$) 
end

procedure test(G:IAutomaton) begin
    var accepted:List<String> := []
    var rejected:List<String> := []
    
    for i in 0..2 and j in 0‥2 andk in 0..2 do
    	var w1:String := repeatString("a", i) + repeatString("b", j) + repeatString("c", k)
    	var w2:String := repeatString("a",(3-i)%3) + repeatString("b",(3-j)%3) + repeatString("c", (3-k)%3)
    	var testString:String := w1 + "$" + w2
                
    	if G.acceptsString(testString) then
        	accepted.append(testString    
    	else
        	rejected.append(testString)
		end
    end
    print("Accepted strings: " + accepted.toString())
    print("Rejected strings: " + rejected.toString())
end


function repeatString(str:String, count:Int):String begin
    return (0 until count).map(_ => str).join()
end






 
 